{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "import os\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, BatchNormalization\n",
    "from keras.optimizers import Adam\n",
    "from collections import deque\n",
    "import matplotlib.pyplot as plt\n",
    "from keras import backend as K\n",
    "from IPython.display import Image\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1D Ising chain energy minimization with Deep Q-learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Ising model is a simple model, which can be mapped to many real physical systems. Typically it is used to model phase transitions of magnetic materials. Imagine a chain of N particles, each interacting with its nearest neighbours. The Hamiltonian (energy) of this system is given by"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$H = J \\sum_{i=1}^{N-1} \\sigma_i\\sigma_{i+1}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here $\\sigma_i$ is the spin of particle i, which can take values $\\sigma_i = \\pm 1$. J is an interaction parameter, which determines wheter the spins want to align or anti-align. A simple example is a chain of $N=3$ spins, which is described by"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ H = J (\\sigma_1\\sigma_2 + \\sigma_2\\sigma_3) $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If $J>0$, the equilibrium state (which is the minium energy state), is one where all the spins are anti-aligned with its nearest neighbours. E.g., if $J = 1$, one of the minimums of H is the configuration $\\sigma_1 = 1$, $\\sigma_2 = -1$ and $\\sigma_3 = 1$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ H_{min} = 1\\cdot(1\\cdot-1 + -1\\cdot1) = -2 $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While if $J<0$ the energy minimum is when the spins are aligned. E.g., if $J= -1$, then one of the energy minima is found when the spin configuration is $\\sigma_1 = \\sigma_2 = \\sigma_3 = 1$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$H_{min} = -1\\cdot(1\\cdot1 + 1\\cdot1 ) = -2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](figs/ising_ex.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that depending on the sign of $J$, the energy minima is either a parallel or an anti-parallel alignment of the spins."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Usually, introduction to Deep Q-learning is done by using openai gym, in environments like cartpole and mountaincar. I think this system is much simpler, and can be used to illustrate some imporant features of Q-learning. This guide is meant for those who have some experience in reinforcement learning, as I will not go through details of the algorithm. There are many good reasources online where you can read about Deep-Q learning, which is the algorithm used here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The goal is to minimize the energy of a 1D chain of spins, in as few steps as possible, by letting the agent choose which spin to flip each step. The episode ends when the energy minima is found, or when the maximum number of spin flips is performed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spin chain enviornment\n",
    "Here we define the enironment that the agent will interact with. It takes as input only the number of spins in the chain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class spin_chain_env:\n",
    "    \n",
    "    def __init__(self,N):\n",
    "        self.N = N  # Number of chained spins\n",
    "        self.action_space = np.zeros(self.N)\n",
    "        self.observation_space = np.zeros(self.N)\n",
    "        self.max_steps = self.N # Set the maximum number of steps before episode end.\n",
    "        \n",
    "        \n",
    "    # After each episode, the state is reset to a random configuration of spins.\n",
    "    # The state is just the spin configuration, which is an array of +1 and -1.\n",
    "    def reset(self):\n",
    "        self.state = np.array([random.choice([-1,1]) for n in range(self.N) ])\n",
    "        self.cum_reward = 0\n",
    "        self.steps = 0\n",
    "        return self.state\n",
    "    \n",
    "    def step(self,action):\n",
    "        self.steps +=1\n",
    "        \n",
    "        # The action is to choose a spin in the chain, and flip it, i.e. -1 -> 1, and 1 -> -1\n",
    "        self.state[action] = -1*self.state[action]\n",
    "        \n",
    "        # If J is negative, the minimum is ferromagnetic (anti-aligned), \n",
    "        # and if positive it is antiferromagnetic (alinged)\n",
    "        \n",
    "        J = 1\n",
    "        \n",
    "        # Here we calculate the energy, which we want to minimize\n",
    "        energy = np.sum([J*self.state[n]*self.state[n+1] for n in range(self.N-1)]) \n",
    "        #energy += J*self.state[0]*self.state[self.N-1] ## Enable for periodic boundary conditions.\n",
    "        \n",
    "        \n",
    "        min_energy = -(self.N-1)*abs(J) #This is the minimum energy state for a 1D chain of N spins. \n",
    "        \n",
    "        # If the energy minimum is found we end the episode, and give the energy as reward.\n",
    "        # If we reach the maximum number of allowed steps, we end the episode.\n",
    "        # Every step, we give a reward (punishment) of -1, so that the agent is encouraged to use as few steps as poissible\n",
    "        # to minimize the energy\n",
    "        \n",
    "        if energy == min_energy:\n",
    "            done = True\n",
    "            reward = -energy\n",
    "            self.cum_reward += reward\n",
    "\n",
    "        elif self.steps == self.max_steps:\n",
    "            done = True\n",
    "            reward = -1\n",
    "            self.cum_reward += reward     \n",
    "        else:\n",
    "            done = False\n",
    "            reward = -1\n",
    "            self.cum_reward += reward\n",
    "        \n",
    "        return np.array(self.state), reward, done, {}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some comments on the environment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we didnt give some negative reward for each step, the agents learning would drastically slow down. It would still be able to find the energy minima, but it would not care how fast it got there. The agent would consider experiences where the spins are unnessecarily flipped twice, and those where the energy is minimized in as few flips as possible, equally good choices, as long as the minimum energy is eventually reached"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Agent \n",
    "Here we define the agent that will interact with the environment. It consists of a neural network, which is used to learn the optimal Q-value for all action-state pairs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Agent:\n",
    "    \n",
    "    # Initialize the agent with common hyperparameters\n",
    "    def __init__(self, state_size, action_size):\n",
    "        \n",
    "        self.state_size = state_size\n",
    "        self.action_size = action_size\n",
    "        \n",
    "        self.memory = deque(maxlen = 10000) # Size of the experience replay memory\n",
    "        \n",
    "        self.gamma = 1.0  # We have added a negative reward for each time step\n",
    "                          # so there is no need to set the discount below 1\n",
    "            \n",
    "        self.epsilon = 1.0 # Initial exploration rate\n",
    "        \n",
    "        # The epsilon decay and epsilon min are redefined later, based on the total number of episodes.\n",
    "        self.epsilon_decay = 0.99995 \n",
    "        self.epsilon_min = 0.01\n",
    "        \n",
    "        self.learning_rate = 0.001        \n",
    "        \n",
    "        self.model = self._build_model()\n",
    "        self.target_model = self._build_model()\n",
    "    \n",
    "    # Here we build the neural network, which will predict the best action based on the state\n",
    "    def _build_model(self):\n",
    "        \n",
    "        model = Sequential()\n",
    "        \n",
    "        model.add(Dense(12, input_dim = self.state_size, activation = 'relu'))\n",
    "        model.add(Dense(24, activation = 'relu'))\n",
    "        model.add(Dense(12, activation = 'relu'))\n",
    "        model.add(Dense(self.action_size, activation = 'linear'))\n",
    "        \n",
    "        model.compile(loss='mse', optimizer = Adam(lr = self.learning_rate))\n",
    "        \n",
    "        return model\n",
    "    \n",
    "    # Store experiences in a replay memory\n",
    "    def remember(self, state, action, reward, next_state, done):\n",
    "        \n",
    "        self.memory.append((state, action, reward, next_state, done))\n",
    "     \n",
    "    # Here the network chooses an action to perform. If a randomly generated number is less than epsilon\n",
    "    # a random action is taken, and if its larger, the action that the agent think is best is performed.\n",
    "    def act(self,state):\n",
    "        if np.random.rand() <= self.epsilon:\n",
    "            return random.randrange(self.action_size)\n",
    "        act_values = self.model.predict(state)\n",
    "        return np.argmax(act_values[0])\n",
    "    \n",
    "    # Here the neural network is updated based on random samples of experiences from the replay memory\n",
    "    def replay(self, batch_size):\n",
    "        \n",
    "        minibatch = random.sample(self.memory, batch_size)\n",
    "        \n",
    "        for state, action, reward, next_state, done in minibatch:\n",
    "            \n",
    "            target = self.target_model.predict(state)\n",
    "            \n",
    "            if done:\n",
    "                target[0][action] = reward\n",
    "                \n",
    "            else:\n",
    "                Q_future = max(self.target_model.predict(next_state)[0])\n",
    "                target[0][action] = reward + Q_future*self.gamma\n",
    "                \n",
    "            self.model.fit(state, target, epochs = 1, verbose = 0)    \n",
    "    \n",
    "    def load(self, name):\n",
    "        self.model.load_weights(name)\n",
    "        \n",
    "    def save(self,name):\n",
    "        self.model.save_weights(name)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1 = np.array([])\n",
    "Q2 = np.array([])\n",
    "score = np.array([])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State size: 4\n",
      "Action size: 4\n"
     ]
    }
   ],
   "source": [
    "n_spins = 4\n",
    "env = spin_chain_env(n_spins)\n",
    "state_size = env.observation_space.shape[0]\n",
    "action_size = env.action_space.shape[0]\n",
    "print('State size: {}'.format(state_size))\n",
    "print('Action size: {}'.format(action_size))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 32\n",
    "n_episodes = 1000\n",
    "tau = 1e-2\n",
    "\n",
    "agent = Agent(state_size, action_size)\n",
    "agent.epsilon_decay = (0.05)**(1/n_episodes)\n",
    "agent.memory = deque(maxlen = 1000)\n",
    "agent = Agent(state_size, action_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "agent.epsilon_decay = (0.05)**(1/n_episodes)\n",
    "agent.memory = deque(maxlen = 1000)\n",
    "agent.epsilon = 1.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To study the agents performance, we store its estimation of the Q-function of a trial state every episode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "episode: 0/1000, score: -4, epsilon: 1.0\n",
      "episode: 1/1000, score: -4, epsilon: 1.0\n",
      "episode: 2/1000, score: -4, epsilon: 0.99\n",
      "episode: 3/1000, score: -4, epsilon: 0.99\n",
      "episode: 4/1000, score: -4, epsilon: 0.99\n",
      "episode: 5/1000, score: -4, epsilon: 0.99\n",
      "episode: 6/1000, score: 0, epsilon: 0.98\n",
      "episode: 7/1000, score: 2, epsilon: 0.98\n",
      "episode: 8/1000, score: -4, epsilon: 0.98\n",
      "episode: 9/1000, score: -4, epsilon: 0.97\n",
      "episode: 10/1000, score: -4, epsilon: 0.97\n",
      "episode: 11/1000, score: 2, epsilon: 0.97\n",
      "episode: 12/1000, score: -4, epsilon: 0.96\n",
      "episode: 13/1000, score: -4, epsilon: 0.96\n",
      "episode: 14/1000, score: 3, epsilon: 0.96\n",
      "episode: 15/1000, score: 3, epsilon: 0.96\n",
      "episode: 16/1000, score: 3, epsilon: 0.95\n",
      "episode: 17/1000, score: -4, epsilon: 0.95\n",
      "episode: 18/1000, score: -4, epsilon: 0.95\n",
      "episode: 19/1000, score: 3, epsilon: 0.94\n",
      "episode: 20/1000, score: 2, epsilon: 0.94\n",
      "episode: 21/1000, score: 2, epsilon: 0.94\n",
      "episode: 22/1000, score: -4, epsilon: 0.94\n",
      "episode: 23/1000, score: 1, epsilon: 0.93\n",
      "episode: 24/1000, score: -4, epsilon: 0.93\n",
      "episode: 25/1000, score: -4, epsilon: 0.93\n",
      "episode: 26/1000, score: -4, epsilon: 0.93\n",
      "episode: 27/1000, score: 1, epsilon: 0.92\n",
      "episode: 28/1000, score: 0, epsilon: 0.92\n",
      "episode: 29/1000, score: 0, epsilon: 0.92\n",
      "episode: 30/1000, score: 0, epsilon: 0.91\n",
      "episode: 31/1000, score: -4, epsilon: 0.91\n",
      "episode: 32/1000, score: -4, epsilon: 0.91\n",
      "episode: 33/1000, score: -4, epsilon: 0.91\n",
      "episode: 34/1000, score: 3, epsilon: 0.9\n",
      "episode: 35/1000, score: -4, epsilon: 0.9\n",
      "episode: 36/1000, score: -4, epsilon: 0.9\n",
      "episode: 37/1000, score: 1, epsilon: 0.9\n",
      "episode: 38/1000, score: 3, epsilon: 0.89\n",
      "episode: 39/1000, score: -4, epsilon: 0.89\n",
      "episode: 40/1000, score: -4, epsilon: 0.89\n",
      "episode: 41/1000, score: 0, epsilon: 0.88\n",
      "episode: 42/1000, score: 1, epsilon: 0.88\n",
      "episode: 43/1000, score: 3, epsilon: 0.88\n",
      "episode: 44/1000, score: 3, epsilon: 0.88\n",
      "episode: 45/1000, score: 3, epsilon: 0.87\n",
      "episode: 46/1000, score: 3, epsilon: 0.87\n",
      "episode: 47/1000, score: -4, epsilon: 0.87\n",
      "episode: 48/1000, score: 3, epsilon: 0.87\n",
      "episode: 49/1000, score: 0, epsilon: 0.86\n",
      "episode: 50/1000, score: -4, epsilon: 0.86\n",
      "episode: 51/1000, score: -4, epsilon: 0.86\n",
      "episode: 52/1000, score: 2, epsilon: 0.86\n",
      "episode: 53/1000, score: -4, epsilon: 0.85\n",
      "episode: 54/1000, score: 3, epsilon: 0.85\n",
      "episode: 55/1000, score: -4, epsilon: 0.85\n",
      "episode: 56/1000, score: 3, epsilon: 0.85\n",
      "episode: 57/1000, score: -4, epsilon: 0.84\n",
      "episode: 58/1000, score: -4, epsilon: 0.84\n",
      "episode: 59/1000, score: 3, epsilon: 0.84\n",
      "episode: 60/1000, score: 2, epsilon: 0.84\n",
      "episode: 61/1000, score: 0, epsilon: 0.83\n",
      "episode: 62/1000, score: 2, epsilon: 0.83\n",
      "episode: 63/1000, score: 1, epsilon: 0.83\n",
      "episode: 64/1000, score: -4, epsilon: 0.83\n",
      "episode: 65/1000, score: 0, epsilon: 0.82\n",
      "episode: 66/1000, score: -4, epsilon: 0.82\n",
      "episode: 67/1000, score: 3, epsilon: 0.82\n",
      "episode: 68/1000, score: -4, epsilon: 0.82\n",
      "episode: 69/1000, score: 3, epsilon: 0.81\n",
      "episode: 70/1000, score: -4, epsilon: 0.81\n",
      "episode: 71/1000, score: -4, epsilon: 0.81\n",
      "episode: 72/1000, score: 0, epsilon: 0.81\n",
      "episode: 73/1000, score: -4, epsilon: 0.8\n",
      "episode: 74/1000, score: 3, epsilon: 0.8\n",
      "episode: 75/1000, score: 2, epsilon: 0.8\n",
      "episode: 76/1000, score: 2, epsilon: 0.8\n",
      "episode: 77/1000, score: -4, epsilon: 0.79\n",
      "episode: 78/1000, score: -4, epsilon: 0.79\n",
      "episode: 79/1000, score: 2, epsilon: 0.79\n",
      "episode: 80/1000, score: 3, epsilon: 0.79\n",
      "episode: 81/1000, score: 2, epsilon: 0.78\n",
      "episode: 82/1000, score: 0, epsilon: 0.78\n",
      "episode: 83/1000, score: -4, epsilon: 0.78\n",
      "episode: 84/1000, score: -4, epsilon: 0.78\n",
      "episode: 85/1000, score: 0, epsilon: 0.78\n",
      "episode: 86/1000, score: 1, epsilon: 0.77\n",
      "episode: 87/1000, score: -4, epsilon: 0.77\n",
      "episode: 88/1000, score: -4, epsilon: 0.77\n",
      "episode: 89/1000, score: 2, epsilon: 0.77\n",
      "episode: 90/1000, score: 3, epsilon: 0.76\n",
      "episode: 91/1000, score: 3, epsilon: 0.76\n",
      "episode: 92/1000, score: 3, epsilon: 0.76\n",
      "episode: 93/1000, score: 3, epsilon: 0.76\n",
      "episode: 94/1000, score: 2, epsilon: 0.75\n",
      "episode: 95/1000, score: 3, epsilon: 0.75\n",
      "episode: 96/1000, score: 1, epsilon: 0.75\n",
      "episode: 97/1000, score: -4, epsilon: 0.75\n",
      "episode: 98/1000, score: -4, epsilon: 0.75\n",
      "episode: 99/1000, score: 1, epsilon: 0.74\n",
      "episode: 100/1000, score: -4, epsilon: 0.74\n",
      "episode: 101/1000, score: 2, epsilon: 0.74\n",
      "episode: 102/1000, score: 2, epsilon: 0.74\n",
      "episode: 103/1000, score: 3, epsilon: 0.73\n",
      "episode: 104/1000, score: 2, epsilon: 0.73\n",
      "episode: 105/1000, score: -4, epsilon: 0.73\n",
      "episode: 106/1000, score: 2, epsilon: 0.73\n",
      "episode: 107/1000, score: 3, epsilon: 0.73\n",
      "episode: 108/1000, score: 3, epsilon: 0.72\n",
      "episode: 109/1000, score: -4, epsilon: 0.72\n",
      "episode: 110/1000, score: -4, epsilon: 0.72\n",
      "episode: 111/1000, score: 3, epsilon: 0.72\n",
      "episode: 112/1000, score: 0, epsilon: 0.71\n",
      "episode: 113/1000, score: 3, epsilon: 0.71\n",
      "episode: 114/1000, score: 2, epsilon: 0.71\n",
      "episode: 115/1000, score: 2, epsilon: 0.71\n",
      "episode: 116/1000, score: 2, epsilon: 0.71\n",
      "episode: 117/1000, score: 2, epsilon: 0.7\n",
      "episode: 118/1000, score: 1, epsilon: 0.7\n",
      "episode: 119/1000, score: 3, epsilon: 0.7\n",
      "episode: 120/1000, score: 0, epsilon: 0.7\n",
      "episode: 121/1000, score: 2, epsilon: 0.7\n",
      "episode: 122/1000, score: 3, epsilon: 0.69\n",
      "episode: 123/1000, score: 1, epsilon: 0.69\n",
      "episode: 124/1000, score: 2, epsilon: 0.69\n",
      "episode: 125/1000, score: -4, epsilon: 0.69\n",
      "episode: 126/1000, score: -4, epsilon: 0.69\n",
      "episode: 127/1000, score: 2, epsilon: 0.68\n",
      "episode: 128/1000, score: 3, epsilon: 0.68\n",
      "episode: 129/1000, score: 3, epsilon: 0.68\n",
      "episode: 130/1000, score: 3, epsilon: 0.68\n",
      "episode: 131/1000, score: 2, epsilon: 0.68\n",
      "episode: 132/1000, score: 3, epsilon: 0.67\n",
      "episode: 133/1000, score: -4, epsilon: 0.67\n",
      "episode: 134/1000, score: 3, epsilon: 0.67\n",
      "episode: 135/1000, score: 2, epsilon: 0.67\n",
      "episode: 136/1000, score: 2, epsilon: 0.67\n",
      "episode: 137/1000, score: -4, epsilon: 0.66\n",
      "episode: 138/1000, score: -4, epsilon: 0.66\n",
      "episode: 139/1000, score: 2, epsilon: 0.66\n",
      "episode: 140/1000, score: 1, epsilon: 0.66\n",
      "episode: 141/1000, score: -4, epsilon: 0.66\n",
      "episode: 142/1000, score: 2, epsilon: 0.65\n",
      "episode: 143/1000, score: -4, epsilon: 0.65\n",
      "episode: 144/1000, score: 2, epsilon: 0.65\n",
      "episode: 145/1000, score: -4, epsilon: 0.65\n",
      "episode: 146/1000, score: 3, epsilon: 0.65\n",
      "episode: 147/1000, score: 2, epsilon: 0.64\n",
      "episode: 148/1000, score: 3, epsilon: 0.64\n",
      "episode: 149/1000, score: 3, epsilon: 0.64\n",
      "episode: 150/1000, score: -4, epsilon: 0.64\n",
      "episode: 151/1000, score: -4, epsilon: 0.64\n",
      "episode: 152/1000, score: 3, epsilon: 0.63\n",
      "episode: 153/1000, score: 3, epsilon: 0.63\n",
      "episode: 154/1000, score: 2, epsilon: 0.63\n",
      "episode: 155/1000, score: -4, epsilon: 0.63\n",
      "episode: 156/1000, score: -4, epsilon: 0.63\n",
      "episode: 157/1000, score: 2, epsilon: 0.62\n",
      "episode: 158/1000, score: 0, epsilon: 0.62\n",
      "episode: 159/1000, score: 2, epsilon: 0.62\n",
      "episode: 160/1000, score: 3, epsilon: 0.62\n",
      "episode: 161/1000, score: 3, epsilon: 0.62\n",
      "episode: 162/1000, score: 3, epsilon: 0.62\n",
      "episode: 163/1000, score: -4, epsilon: 0.61\n",
      "episode: 164/1000, score: -4, epsilon: 0.61\n",
      "episode: 165/1000, score: 3, epsilon: 0.61\n",
      "episode: 166/1000, score: 3, epsilon: 0.61\n",
      "episode: 167/1000, score: 2, epsilon: 0.61\n",
      "episode: 168/1000, score: -4, epsilon: 0.6\n",
      "episode: 169/1000, score: -4, epsilon: 0.6\n",
      "episode: 170/1000, score: 2, epsilon: 0.6\n",
      "episode: 171/1000, score: -4, epsilon: 0.6\n",
      "episode: 172/1000, score: 1, epsilon: 0.6\n",
      "episode: 173/1000, score: 1, epsilon: 0.6\n",
      "episode: 174/1000, score: 0, epsilon: 0.59\n",
      "episode: 175/1000, score: 2, epsilon: 0.59\n",
      "episode: 176/1000, score: -4, epsilon: 0.59\n",
      "episode: 177/1000, score: -4, epsilon: 0.59\n",
      "episode: 178/1000, score: 3, epsilon: 0.59\n",
      "episode: 179/1000, score: 2, epsilon: 0.58\n",
      "episode: 180/1000, score: 2, epsilon: 0.58\n",
      "episode: 181/1000, score: 2, epsilon: 0.58\n",
      "episode: 182/1000, score: 2, epsilon: 0.58\n",
      "episode: 183/1000, score: 0, epsilon: 0.58\n",
      "episode: 184/1000, score: 0, epsilon: 0.58\n",
      "episode: 185/1000, score: 1, epsilon: 0.57\n",
      "episode: 186/1000, score: 0, epsilon: 0.57\n",
      "episode: 187/1000, score: 3, epsilon: 0.57\n",
      "episode: 188/1000, score: 1, epsilon: 0.57\n",
      "episode: 189/1000, score: 2, epsilon: 0.57\n",
      "episode: 190/1000, score: 0, epsilon: 0.57\n",
      "episode: 191/1000, score: 2, epsilon: 0.56\n",
      "episode: 192/1000, score: 3, epsilon: 0.56\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "episode: 193/1000, score: -4, epsilon: 0.56\n",
      "episode: 194/1000, score: 1, epsilon: 0.56\n",
      "episode: 195/1000, score: 1, epsilon: 0.56\n",
      "episode: 196/1000, score: -4, epsilon: 0.56\n",
      "episode: 197/1000, score: 0, epsilon: 0.55\n",
      "episode: 198/1000, score: 3, epsilon: 0.55\n",
      "episode: 199/1000, score: 0, epsilon: 0.55\n",
      "episode: 200/1000, score: 0, epsilon: 0.55\n",
      "episode: 201/1000, score: 2, epsilon: 0.55\n",
      "episode: 202/1000, score: 3, epsilon: 0.55\n",
      "episode: 203/1000, score: 2, epsilon: 0.54\n",
      "episode: 204/1000, score: -4, epsilon: 0.54\n",
      "episode: 205/1000, score: 3, epsilon: 0.54\n",
      "episode: 206/1000, score: 1, epsilon: 0.54\n",
      "episode: 207/1000, score: -4, epsilon: 0.54\n",
      "episode: 208/1000, score: 1, epsilon: 0.54\n",
      "episode: 209/1000, score: 2, epsilon: 0.53\n",
      "episode: 210/1000, score: 3, epsilon: 0.53\n",
      "episode: 211/1000, score: 2, epsilon: 0.53\n",
      "episode: 212/1000, score: 3, epsilon: 0.53\n",
      "episode: 213/1000, score: 2, epsilon: 0.53\n",
      "episode: 214/1000, score: -4, epsilon: 0.53\n",
      "episode: 215/1000, score: 2, epsilon: 0.53\n",
      "episode: 216/1000, score: 3, epsilon: 0.52\n",
      "episode: 217/1000, score: 2, epsilon: 0.52\n",
      "episode: 218/1000, score: -4, epsilon: 0.52\n",
      "episode: 219/1000, score: 0, epsilon: 0.52\n",
      "episode: 220/1000, score: 2, epsilon: 0.52\n",
      "episode: 221/1000, score: 3, epsilon: 0.52\n",
      "episode: 222/1000, score: 0, epsilon: 0.51\n",
      "episode: 223/1000, score: 0, epsilon: 0.51\n",
      "episode: 224/1000, score: 2, epsilon: 0.51\n",
      "episode: 225/1000, score: 2, epsilon: 0.51\n",
      "episode: 226/1000, score: 3, epsilon: 0.51\n",
      "episode: 227/1000, score: 2, epsilon: 0.51\n",
      "episode: 228/1000, score: 3, epsilon: 0.51\n",
      "episode: 229/1000, score: -4, epsilon: 0.5\n",
      "episode: 230/1000, score: 3, epsilon: 0.5\n",
      "episode: 231/1000, score: -4, epsilon: 0.5\n",
      "episode: 232/1000, score: 1, epsilon: 0.5\n",
      "episode: 233/1000, score: 2, epsilon: 0.5\n",
      "episode: 234/1000, score: 2, epsilon: 0.5\n",
      "episode: 235/1000, score: 2, epsilon: 0.49\n",
      "episode: 236/1000, score: 2, epsilon: 0.49\n",
      "episode: 237/1000, score: 0, epsilon: 0.49\n",
      "episode: 238/1000, score: -4, epsilon: 0.49\n",
      "episode: 239/1000, score: 3, epsilon: 0.49\n",
      "episode: 240/1000, score: 2, epsilon: 0.49\n",
      "episode: 241/1000, score: 3, epsilon: 0.49\n",
      "episode: 242/1000, score: 0, epsilon: 0.48\n",
      "episode: 243/1000, score: 1, epsilon: 0.48\n",
      "episode: 244/1000, score: 0, epsilon: 0.48\n",
      "episode: 245/1000, score: 3, epsilon: 0.48\n",
      "episode: 246/1000, score: 1, epsilon: 0.48\n",
      "episode: 247/1000, score: 2, epsilon: 0.48\n",
      "episode: 248/1000, score: 3, epsilon: 0.48\n",
      "episode: 249/1000, score: 3, epsilon: 0.47\n",
      "episode: 250/1000, score: 2, epsilon: 0.47\n",
      "episode: 251/1000, score: 2, epsilon: 0.47\n",
      "episode: 252/1000, score: 1, epsilon: 0.47\n",
      "episode: 253/1000, score: 2, epsilon: 0.47\n",
      "episode: 254/1000, score: 2, epsilon: 0.47\n",
      "episode: 255/1000, score: 3, epsilon: 0.47\n",
      "episode: 256/1000, score: 1, epsilon: 0.46\n",
      "episode: 257/1000, score: 2, epsilon: 0.46\n",
      "episode: 258/1000, score: 2, epsilon: 0.46\n",
      "episode: 259/1000, score: 3, epsilon: 0.46\n",
      "episode: 260/1000, score: 1, epsilon: 0.46\n",
      "episode: 261/1000, score: 3, epsilon: 0.46\n",
      "episode: 262/1000, score: 3, epsilon: 0.46\n",
      "episode: 263/1000, score: 3, epsilon: 0.45\n",
      "episode: 264/1000, score: 3, epsilon: 0.45\n",
      "episode: 265/1000, score: -4, epsilon: 0.45\n",
      "episode: 266/1000, score: 2, epsilon: 0.45\n",
      "episode: 267/1000, score: 1, epsilon: 0.45\n",
      "episode: 268/1000, score: 2, epsilon: 0.45\n",
      "episode: 269/1000, score: 2, epsilon: 0.45\n",
      "episode: 270/1000, score: 2, epsilon: 0.45\n",
      "episode: 271/1000, score: 3, epsilon: 0.44\n",
      "episode: 272/1000, score: 2, epsilon: 0.44\n",
      "episode: 273/1000, score: -4, epsilon: 0.44\n",
      "episode: 274/1000, score: 3, epsilon: 0.44\n",
      "episode: 275/1000, score: 2, epsilon: 0.44\n",
      "episode: 276/1000, score: 2, epsilon: 0.44\n",
      "episode: 277/1000, score: 3, epsilon: 0.44\n",
      "episode: 278/1000, score: 3, epsilon: 0.43\n",
      "episode: 279/1000, score: 3, epsilon: 0.43\n",
      "episode: 280/1000, score: 0, epsilon: 0.43\n",
      "episode: 281/1000, score: 2, epsilon: 0.43\n",
      "episode: 282/1000, score: -4, epsilon: 0.43\n",
      "episode: 283/1000, score: 2, epsilon: 0.43\n",
      "episode: 284/1000, score: 2, epsilon: 0.43\n",
      "episode: 285/1000, score: 1, epsilon: 0.43\n",
      "episode: 286/1000, score: 3, epsilon: 0.42\n",
      "episode: 287/1000, score: 0, epsilon: 0.42\n",
      "episode: 288/1000, score: 3, epsilon: 0.42\n",
      "episode: 289/1000, score: 2, epsilon: 0.42\n",
      "episode: 290/1000, score: 2, epsilon: 0.42\n",
      "episode: 291/1000, score: 0, epsilon: 0.42\n",
      "episode: 292/1000, score: 3, epsilon: 0.42\n",
      "episode: 293/1000, score: 3, epsilon: 0.42\n",
      "episode: 294/1000, score: 3, epsilon: 0.41\n",
      "episode: 295/1000, score: 2, epsilon: 0.41\n",
      "episode: 296/1000, score: 3, epsilon: 0.41\n",
      "episode: 297/1000, score: 2, epsilon: 0.41\n",
      "episode: 298/1000, score: 2, epsilon: 0.41\n",
      "episode: 299/1000, score: 0, epsilon: 0.41\n",
      "episode: 300/1000, score: -4, epsilon: 0.41\n",
      "episode: 301/1000, score: -4, epsilon: 0.41\n",
      "episode: 302/1000, score: 2, epsilon: 0.4\n",
      "episode: 303/1000, score: 3, epsilon: 0.4\n",
      "episode: 304/1000, score: 3, epsilon: 0.4\n",
      "episode: 305/1000, score: 2, epsilon: 0.4\n",
      "episode: 306/1000, score: 2, epsilon: 0.4\n",
      "episode: 307/1000, score: 0, epsilon: 0.4\n",
      "episode: 308/1000, score: 2, epsilon: 0.4\n",
      "episode: 309/1000, score: 2, epsilon: 0.4\n",
      "episode: 310/1000, score: 2, epsilon: 0.4\n",
      "episode: 311/1000, score: -4, epsilon: 0.39\n",
      "episode: 312/1000, score: 2, epsilon: 0.39\n",
      "episode: 313/1000, score: 2, epsilon: 0.39\n",
      "episode: 314/1000, score: 2, epsilon: 0.39\n",
      "episode: 315/1000, score: 0, epsilon: 0.39\n",
      "episode: 316/1000, score: 0, epsilon: 0.39\n",
      "episode: 317/1000, score: 1, epsilon: 0.39\n",
      "episode: 318/1000, score: 3, epsilon: 0.39\n",
      "episode: 319/1000, score: 3, epsilon: 0.38\n",
      "episode: 320/1000, score: 3, epsilon: 0.38\n",
      "episode: 321/1000, score: 3, epsilon: 0.38\n",
      "episode: 322/1000, score: 3, epsilon: 0.38\n",
      "episode: 323/1000, score: -4, epsilon: 0.38\n",
      "episode: 324/1000, score: 3, epsilon: 0.38\n",
      "episode: 325/1000, score: 2, epsilon: 0.38\n",
      "episode: 326/1000, score: 3, epsilon: 0.38\n",
      "episode: 327/1000, score: -4, epsilon: 0.38\n",
      "episode: 328/1000, score: 2, epsilon: 0.37\n",
      "episode: 329/1000, score: 3, epsilon: 0.37\n",
      "episode: 330/1000, score: 3, epsilon: 0.37\n",
      "episode: 331/1000, score: 2, epsilon: 0.37\n",
      "episode: 332/1000, score: 1, epsilon: 0.37\n",
      "episode: 333/1000, score: 2, epsilon: 0.37\n",
      "episode: 334/1000, score: 2, epsilon: 0.37\n",
      "episode: 335/1000, score: 2, epsilon: 0.37\n",
      "episode: 336/1000, score: 3, epsilon: 0.37\n",
      "episode: 337/1000, score: 2, epsilon: 0.36\n",
      "episode: 338/1000, score: 3, epsilon: 0.36\n",
      "episode: 339/1000, score: 0, epsilon: 0.36\n",
      "episode: 340/1000, score: 0, epsilon: 0.36\n",
      "episode: 341/1000, score: 1, epsilon: 0.36\n",
      "episode: 342/1000, score: -4, epsilon: 0.36\n",
      "episode: 343/1000, score: 2, epsilon: 0.36\n",
      "episode: 344/1000, score: 3, epsilon: 0.36\n",
      "episode: 345/1000, score: 2, epsilon: 0.36\n",
      "episode: 346/1000, score: -4, epsilon: 0.35\n",
      "episode: 347/1000, score: 2, epsilon: 0.35\n",
      "episode: 348/1000, score: 0, epsilon: 0.35\n",
      "episode: 349/1000, score: 2, epsilon: 0.35\n",
      "episode: 350/1000, score: -4, epsilon: 0.35\n",
      "episode: 351/1000, score: 2, epsilon: 0.35\n",
      "episode: 352/1000, score: 2, epsilon: 0.35\n",
      "episode: 353/1000, score: 3, epsilon: 0.35\n",
      "episode: 354/1000, score: 2, epsilon: 0.35\n",
      "episode: 355/1000, score: 3, epsilon: 0.35\n",
      "episode: 356/1000, score: 2, epsilon: 0.34\n",
      "episode: 357/1000, score: -4, epsilon: 0.34\n",
      "episode: 358/1000, score: 1, epsilon: 0.34\n",
      "episode: 359/1000, score: 1, epsilon: 0.34\n",
      "episode: 360/1000, score: -4, epsilon: 0.34\n",
      "episode: 361/1000, score: 2, epsilon: 0.34\n",
      "episode: 362/1000, score: 3, epsilon: 0.34\n",
      "episode: 363/1000, score: 2, epsilon: 0.34\n",
      "episode: 364/1000, score: 2, epsilon: 0.34\n",
      "episode: 365/1000, score: 2, epsilon: 0.34\n",
      "episode: 366/1000, score: 2, epsilon: 0.33\n",
      "episode: 367/1000, score: 1, epsilon: 0.33\n",
      "episode: 368/1000, score: 2, epsilon: 0.33\n",
      "episode: 369/1000, score: 1, epsilon: 0.33\n",
      "episode: 370/1000, score: 2, epsilon: 0.33\n",
      "episode: 371/1000, score: -4, epsilon: 0.33\n",
      "episode: 372/1000, score: 2, epsilon: 0.33\n",
      "episode: 373/1000, score: -4, epsilon: 0.33\n",
      "episode: 374/1000, score: 1, epsilon: 0.33\n",
      "episode: 375/1000, score: 3, epsilon: 0.33\n",
      "episode: 376/1000, score: 3, epsilon: 0.32\n",
      "episode: 377/1000, score: 3, epsilon: 0.32\n",
      "episode: 378/1000, score: 2, epsilon: 0.32\n",
      "episode: 379/1000, score: 3, epsilon: 0.32\n",
      "episode: 380/1000, score: 3, epsilon: 0.32\n",
      "episode: 381/1000, score: 2, epsilon: 0.32\n",
      "episode: 382/1000, score: 0, epsilon: 0.32\n",
      "episode: 383/1000, score: 2, epsilon: 0.32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "episode: 384/1000, score: 1, epsilon: 0.32\n",
      "episode: 385/1000, score: 3, epsilon: 0.32\n",
      "episode: 386/1000, score: 1, epsilon: 0.31\n",
      "episode: 387/1000, score: 2, epsilon: 0.31\n",
      "episode: 388/1000, score: 3, epsilon: 0.31\n",
      "episode: 389/1000, score: 2, epsilon: 0.31\n",
      "episode: 390/1000, score: 2, epsilon: 0.31\n",
      "episode: 391/1000, score: 3, epsilon: 0.31\n",
      "episode: 392/1000, score: 3, epsilon: 0.31\n",
      "episode: 393/1000, score: 3, epsilon: 0.31\n",
      "episode: 394/1000, score: 3, epsilon: 0.31\n",
      "episode: 395/1000, score: 2, epsilon: 0.31\n",
      "episode: 396/1000, score: 2, epsilon: 0.31\n",
      "episode: 397/1000, score: 2, epsilon: 0.3\n",
      "episode: 398/1000, score: 3, epsilon: 0.3\n",
      "episode: 399/1000, score: 2, epsilon: 0.3\n",
      "episode: 400/1000, score: 2, epsilon: 0.3\n",
      "episode: 401/1000, score: 3, epsilon: 0.3\n",
      "episode: 402/1000, score: 1, epsilon: 0.3\n",
      "episode: 403/1000, score: 3, epsilon: 0.3\n",
      "episode: 404/1000, score: 3, epsilon: 0.3\n",
      "episode: 405/1000, score: 3, epsilon: 0.3\n",
      "episode: 406/1000, score: 3, epsilon: 0.3\n",
      "episode: 407/1000, score: 1, epsilon: 0.3\n",
      "episode: 408/1000, score: -4, epsilon: 0.29\n",
      "episode: 409/1000, score: 1, epsilon: 0.29\n",
      "episode: 410/1000, score: 3, epsilon: 0.29\n",
      "episode: 411/1000, score: 2, epsilon: 0.29\n",
      "episode: 412/1000, score: 3, epsilon: 0.29\n",
      "episode: 413/1000, score: 3, epsilon: 0.29\n",
      "episode: 414/1000, score: 2, epsilon: 0.29\n",
      "episode: 415/1000, score: 1, epsilon: 0.29\n",
      "episode: 416/1000, score: 0, epsilon: 0.29\n",
      "episode: 417/1000, score: 2, epsilon: 0.29\n",
      "episode: 418/1000, score: 3, epsilon: 0.29\n",
      "episode: 419/1000, score: 1, epsilon: 0.29\n",
      "episode: 420/1000, score: 2, epsilon: 0.28\n",
      "episode: 421/1000, score: 1, epsilon: 0.28\n",
      "episode: 422/1000, score: 3, epsilon: 0.28\n",
      "episode: 423/1000, score: -4, epsilon: 0.28\n",
      "episode: 424/1000, score: 3, epsilon: 0.28\n",
      "episode: 425/1000, score: 2, epsilon: 0.28\n",
      "episode: 426/1000, score: 2, epsilon: 0.28\n",
      "episode: 427/1000, score: 3, epsilon: 0.28\n",
      "episode: 428/1000, score: 3, epsilon: 0.28\n",
      "episode: 429/1000, score: 3, epsilon: 0.28\n",
      "episode: 430/1000, score: 3, epsilon: 0.28\n",
      "episode: 431/1000, score: 2, epsilon: 0.27\n",
      "episode: 432/1000, score: 2, epsilon: 0.27\n",
      "episode: 433/1000, score: 2, epsilon: 0.27\n",
      "episode: 434/1000, score: 2, epsilon: 0.27\n",
      "episode: 435/1000, score: 2, epsilon: 0.27\n",
      "episode: 436/1000, score: 2, epsilon: 0.27\n",
      "episode: 437/1000, score: 2, epsilon: 0.27\n",
      "episode: 438/1000, score: 3, epsilon: 0.27\n",
      "episode: 439/1000, score: 3, epsilon: 0.27\n",
      "episode: 440/1000, score: 2, epsilon: 0.27\n",
      "episode: 441/1000, score: 2, epsilon: 0.27\n",
      "episode: 442/1000, score: 3, epsilon: 0.27\n",
      "episode: 443/1000, score: 0, epsilon: 0.27\n",
      "episode: 444/1000, score: 2, epsilon: 0.26\n",
      "episode: 445/1000, score: 3, epsilon: 0.26\n",
      "episode: 446/1000, score: 2, epsilon: 0.26\n",
      "episode: 447/1000, score: 3, epsilon: 0.26\n",
      "episode: 448/1000, score: 3, epsilon: 0.26\n",
      "episode: 449/1000, score: 1, epsilon: 0.26\n",
      "episode: 450/1000, score: 3, epsilon: 0.26\n",
      "episode: 451/1000, score: 3, epsilon: 0.26\n",
      "episode: 452/1000, score: 2, epsilon: 0.26\n",
      "episode: 453/1000, score: 3, epsilon: 0.26\n",
      "episode: 454/1000, score: 2, epsilon: 0.26\n",
      "episode: 455/1000, score: 2, epsilon: 0.26\n",
      "episode: 456/1000, score: 1, epsilon: 0.26\n",
      "episode: 457/1000, score: 1, epsilon: 0.25\n",
      "episode: 458/1000, score: 3, epsilon: 0.25\n",
      "episode: 459/1000, score: 2, epsilon: 0.25\n",
      "episode: 460/1000, score: 1, epsilon: 0.25\n",
      "episode: 461/1000, score: 3, epsilon: 0.25\n",
      "episode: 462/1000, score: 1, epsilon: 0.25\n",
      "episode: 463/1000, score: 3, epsilon: 0.25\n",
      "episode: 464/1000, score: 0, epsilon: 0.25\n",
      "episode: 465/1000, score: 3, epsilon: 0.25\n",
      "episode: 466/1000, score: 2, epsilon: 0.25\n",
      "episode: 467/1000, score: 1, epsilon: 0.25\n",
      "episode: 468/1000, score: 3, epsilon: 0.25\n",
      "episode: 469/1000, score: 3, epsilon: 0.25\n",
      "episode: 470/1000, score: 3, epsilon: 0.24\n",
      "episode: 471/1000, score: 2, epsilon: 0.24\n",
      "episode: 472/1000, score: 2, epsilon: 0.24\n",
      "episode: 473/1000, score: 2, epsilon: 0.24\n",
      "episode: 474/1000, score: 2, epsilon: 0.24\n",
      "episode: 475/1000, score: 2, epsilon: 0.24\n",
      "episode: 476/1000, score: 3, epsilon: 0.24\n",
      "episode: 477/1000, score: 3, epsilon: 0.24\n",
      "episode: 478/1000, score: 3, epsilon: 0.24\n",
      "episode: 479/1000, score: 0, epsilon: 0.24\n",
      "episode: 480/1000, score: 1, epsilon: 0.24\n",
      "episode: 481/1000, score: 0, epsilon: 0.24\n",
      "episode: 482/1000, score: 1, epsilon: 0.24\n",
      "episode: 483/1000, score: 3, epsilon: 0.24\n",
      "episode: 484/1000, score: 2, epsilon: 0.23\n",
      "episode: 485/1000, score: 3, epsilon: 0.23\n",
      "episode: 486/1000, score: 2, epsilon: 0.23\n",
      "episode: 487/1000, score: 2, epsilon: 0.23\n",
      "episode: 488/1000, score: 3, epsilon: 0.23\n",
      "episode: 489/1000, score: 3, epsilon: 0.23\n",
      "episode: 490/1000, score: 2, epsilon: 0.23\n",
      "episode: 491/1000, score: 3, epsilon: 0.23\n",
      "episode: 492/1000, score: 3, epsilon: 0.23\n",
      "episode: 493/1000, score: 3, epsilon: 0.23\n",
      "episode: 494/1000, score: 2, epsilon: 0.23\n",
      "episode: 495/1000, score: 3, epsilon: 0.23\n",
      "episode: 496/1000, score: 3, epsilon: 0.23\n",
      "episode: 497/1000, score: 3, epsilon: 0.23\n",
      "episode: 498/1000, score: 2, epsilon: 0.22\n",
      "episode: 499/1000, score: 3, epsilon: 0.22\n",
      "episode: 500/1000, score: 3, epsilon: 0.22\n",
      "episode: 501/1000, score: 3, epsilon: 0.22\n",
      "episode: 502/1000, score: 3, epsilon: 0.22\n",
      "episode: 503/1000, score: 2, epsilon: 0.22\n",
      "episode: 504/1000, score: 2, epsilon: 0.22\n",
      "episode: 505/1000, score: 3, epsilon: 0.22\n",
      "episode: 506/1000, score: 3, epsilon: 0.22\n",
      "episode: 507/1000, score: 3, epsilon: 0.22\n",
      "episode: 508/1000, score: 3, epsilon: 0.22\n",
      "episode: 509/1000, score: 2, epsilon: 0.22\n",
      "episode: 510/1000, score: 1, epsilon: 0.22\n",
      "episode: 511/1000, score: 2, epsilon: 0.22\n",
      "episode: 512/1000, score: 2, epsilon: 0.22\n",
      "episode: 513/1000, score: 3, epsilon: 0.22\n",
      "episode: 514/1000, score: 2, epsilon: 0.21\n",
      "episode: 515/1000, score: 3, epsilon: 0.21\n",
      "episode: 516/1000, score: 3, epsilon: 0.21\n",
      "episode: 517/1000, score: 3, epsilon: 0.21\n",
      "episode: 518/1000, score: 2, epsilon: 0.21\n",
      "episode: 519/1000, score: 3, epsilon: 0.21\n",
      "episode: 520/1000, score: 2, epsilon: 0.21\n",
      "episode: 521/1000, score: 3, epsilon: 0.21\n",
      "episode: 522/1000, score: 3, epsilon: 0.21\n",
      "episode: 523/1000, score: 3, epsilon: 0.21\n",
      "episode: 524/1000, score: 2, epsilon: 0.21\n",
      "episode: 525/1000, score: 3, epsilon: 0.21\n",
      "episode: 526/1000, score: 2, epsilon: 0.21\n",
      "episode: 527/1000, score: 3, epsilon: 0.21\n",
      "episode: 528/1000, score: -4, epsilon: 0.21\n",
      "episode: 529/1000, score: 2, epsilon: 0.21\n",
      "episode: 530/1000, score: 2, epsilon: 0.2\n",
      "episode: 531/1000, score: 3, epsilon: 0.2\n",
      "episode: 532/1000, score: 2, epsilon: 0.2\n",
      "episode: 533/1000, score: 2, epsilon: 0.2\n",
      "episode: 534/1000, score: 2, epsilon: 0.2\n",
      "episode: 535/1000, score: 3, epsilon: 0.2\n",
      "episode: 536/1000, score: 2, epsilon: 0.2\n",
      "episode: 537/1000, score: 3, epsilon: 0.2\n",
      "episode: 538/1000, score: 3, epsilon: 0.2\n",
      "episode: 539/1000, score: 0, epsilon: 0.2\n",
      "episode: 540/1000, score: 0, epsilon: 0.2\n",
      "episode: 541/1000, score: 3, epsilon: 0.2\n",
      "episode: 542/1000, score: 3, epsilon: 0.2\n",
      "episode: 543/1000, score: 3, epsilon: 0.2\n",
      "episode: 544/1000, score: 3, epsilon: 0.2\n",
      "episode: 545/1000, score: 2, epsilon: 0.2\n",
      "episode: 546/1000, score: 3, epsilon: 0.19\n",
      "episode: 547/1000, score: 2, epsilon: 0.19\n",
      "episode: 548/1000, score: 3, epsilon: 0.19\n",
      "episode: 549/1000, score: 3, epsilon: 0.19\n",
      "episode: 550/1000, score: 2, epsilon: 0.19\n",
      "episode: 551/1000, score: 2, epsilon: 0.19\n",
      "episode: 552/1000, score: 2, epsilon: 0.19\n",
      "episode: 553/1000, score: 3, epsilon: 0.19\n",
      "episode: 554/1000, score: 0, epsilon: 0.19\n",
      "episode: 555/1000, score: 3, epsilon: 0.19\n",
      "episode: 556/1000, score: 2, epsilon: 0.19\n",
      "episode: 557/1000, score: 2, epsilon: 0.19\n",
      "episode: 558/1000, score: 3, epsilon: 0.19\n",
      "episode: 559/1000, score: 3, epsilon: 0.19\n",
      "episode: 560/1000, score: 0, epsilon: 0.19\n",
      "episode: 561/1000, score: 3, epsilon: 0.19\n",
      "episode: 562/1000, score: 3, epsilon: 0.19\n",
      "episode: 563/1000, score: 3, epsilon: 0.19\n",
      "episode: 564/1000, score: 2, epsilon: 0.18\n",
      "episode: 565/1000, score: 2, epsilon: 0.18\n",
      "episode: 566/1000, score: 2, epsilon: 0.18\n",
      "episode: 567/1000, score: 3, epsilon: 0.18\n",
      "episode: 568/1000, score: 2, epsilon: 0.18\n",
      "episode: 569/1000, score: 3, epsilon: 0.18\n",
      "episode: 570/1000, score: 2, epsilon: 0.18\n",
      "episode: 571/1000, score: 0, epsilon: 0.18\n",
      "episode: 572/1000, score: 3, epsilon: 0.18\n",
      "episode: 573/1000, score: 2, epsilon: 0.18\n",
      "episode: 574/1000, score: 2, epsilon: 0.18\n",
      "episode: 575/1000, score: 3, epsilon: 0.18\n",
      "episode: 576/1000, score: 3, epsilon: 0.18\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "episode: 577/1000, score: 2, epsilon: 0.18\n",
      "episode: 578/1000, score: 2, epsilon: 0.18\n",
      "episode: 579/1000, score: 1, epsilon: 0.18\n",
      "episode: 580/1000, score: 0, epsilon: 0.18\n",
      "episode: 581/1000, score: 2, epsilon: 0.18\n",
      "episode: 582/1000, score: 3, epsilon: 0.17\n",
      "episode: 583/1000, score: 2, epsilon: 0.17\n",
      "episode: 584/1000, score: 2, epsilon: 0.17\n",
      "episode: 585/1000, score: 0, epsilon: 0.17\n",
      "episode: 586/1000, score: 2, epsilon: 0.17\n",
      "episode: 587/1000, score: 2, epsilon: 0.17\n",
      "episode: 588/1000, score: 2, epsilon: 0.17\n",
      "episode: 589/1000, score: 3, epsilon: 0.17\n",
      "episode: 590/1000, score: 2, epsilon: 0.17\n",
      "episode: 591/1000, score: 2, epsilon: 0.17\n",
      "episode: 592/1000, score: 3, epsilon: 0.17\n",
      "episode: 593/1000, score: 3, epsilon: 0.17\n",
      "episode: 594/1000, score: 3, epsilon: 0.17\n",
      "episode: 595/1000, score: 2, epsilon: 0.17\n",
      "episode: 596/1000, score: 2, epsilon: 0.17\n",
      "episode: 597/1000, score: 3, epsilon: 0.17\n",
      "episode: 598/1000, score: 2, epsilon: 0.17\n",
      "episode: 599/1000, score: 3, epsilon: 0.17\n",
      "episode: 600/1000, score: 3, epsilon: 0.17\n",
      "episode: 601/1000, score: -4, epsilon: 0.17\n",
      "episode: 602/1000, score: 2, epsilon: 0.16\n",
      "episode: 603/1000, score: 2, epsilon: 0.16\n",
      "episode: 604/1000, score: 2, epsilon: 0.16\n",
      "episode: 605/1000, score: 3, epsilon: 0.16\n",
      "episode: 606/1000, score: 2, epsilon: 0.16\n",
      "episode: 607/1000, score: 3, epsilon: 0.16\n",
      "episode: 608/1000, score: 2, epsilon: 0.16\n",
      "episode: 609/1000, score: 3, epsilon: 0.16\n",
      "episode: 610/1000, score: 3, epsilon: 0.16\n",
      "episode: 611/1000, score: 3, epsilon: 0.16\n",
      "episode: 612/1000, score: 3, epsilon: 0.16\n",
      "episode: 613/1000, score: 3, epsilon: 0.16\n",
      "episode: 614/1000, score: 0, epsilon: 0.16\n",
      "episode: 615/1000, score: 2, epsilon: 0.16\n",
      "episode: 616/1000, score: 2, epsilon: 0.16\n",
      "episode: 617/1000, score: 3, epsilon: 0.16\n",
      "episode: 618/1000, score: 3, epsilon: 0.16\n",
      "episode: 619/1000, score: 3, epsilon: 0.16\n",
      "episode: 620/1000, score: 0, epsilon: 0.16\n",
      "episode: 621/1000, score: 3, epsilon: 0.16\n",
      "episode: 622/1000, score: 3, epsilon: 0.16\n",
      "episode: 623/1000, score: 2, epsilon: 0.15\n",
      "episode: 624/1000, score: 2, epsilon: 0.15\n",
      "episode: 625/1000, score: 2, epsilon: 0.15\n",
      "episode: 626/1000, score: 2, epsilon: 0.15\n",
      "episode: 627/1000, score: 3, epsilon: 0.15\n",
      "episode: 628/1000, score: 3, epsilon: 0.15\n",
      "episode: 629/1000, score: 2, epsilon: 0.15\n",
      "episode: 630/1000, score: 2, epsilon: 0.15\n",
      "episode: 631/1000, score: 2, epsilon: 0.15\n",
      "episode: 632/1000, score: 2, epsilon: 0.15\n",
      "episode: 633/1000, score: 3, epsilon: 0.15\n",
      "episode: 634/1000, score: 3, epsilon: 0.15\n",
      "episode: 635/1000, score: 2, epsilon: 0.15\n",
      "episode: 636/1000, score: 2, epsilon: 0.15\n",
      "episode: 637/1000, score: 2, epsilon: 0.15\n",
      "episode: 638/1000, score: 3, epsilon: 0.15\n",
      "episode: 639/1000, score: 2, epsilon: 0.15\n",
      "episode: 640/1000, score: 3, epsilon: 0.15\n",
      "episode: 641/1000, score: 3, epsilon: 0.15\n",
      "episode: 642/1000, score: 3, epsilon: 0.15\n",
      "episode: 643/1000, score: 2, epsilon: 0.15\n",
      "episode: 644/1000, score: 1, epsilon: 0.15\n",
      "episode: 645/1000, score: 0, epsilon: 0.14\n",
      "episode: 646/1000, score: 2, epsilon: 0.14\n",
      "episode: 647/1000, score: 2, epsilon: 0.14\n",
      "episode: 648/1000, score: 3, epsilon: 0.14\n",
      "episode: 649/1000, score: 2, epsilon: 0.14\n",
      "episode: 650/1000, score: 2, epsilon: 0.14\n",
      "episode: 651/1000, score: 2, epsilon: 0.14\n",
      "episode: 652/1000, score: 2, epsilon: 0.14\n",
      "episode: 653/1000, score: 0, epsilon: 0.14\n",
      "episode: 654/1000, score: 2, epsilon: 0.14\n",
      "episode: 655/1000, score: 2, epsilon: 0.14\n",
      "episode: 656/1000, score: 2, epsilon: 0.14\n",
      "episode: 657/1000, score: 3, epsilon: 0.14\n",
      "episode: 658/1000, score: 3, epsilon: 0.14\n",
      "episode: 659/1000, score: 2, epsilon: 0.14\n",
      "episode: 660/1000, score: 3, epsilon: 0.14\n",
      "episode: 661/1000, score: 2, epsilon: 0.14\n",
      "episode: 662/1000, score: 2, epsilon: 0.14\n",
      "episode: 663/1000, score: 3, epsilon: 0.14\n",
      "episode: 664/1000, score: 3, epsilon: 0.14\n",
      "episode: 665/1000, score: 3, epsilon: 0.14\n",
      "episode: 666/1000, score: 0, epsilon: 0.14\n",
      "episode: 667/1000, score: 2, epsilon: 0.14\n",
      "episode: 668/1000, score: 3, epsilon: 0.14\n",
      "episode: 669/1000, score: 3, epsilon: 0.13\n",
      "episode: 670/1000, score: 2, epsilon: 0.13\n",
      "episode: 671/1000, score: 2, epsilon: 0.13\n",
      "episode: 672/1000, score: 3, epsilon: 0.13\n",
      "episode: 673/1000, score: 0, epsilon: 0.13\n",
      "episode: 674/1000, score: 3, epsilon: 0.13\n",
      "episode: 675/1000, score: 3, epsilon: 0.13\n",
      "episode: 676/1000, score: 2, epsilon: 0.13\n",
      "episode: 677/1000, score: 3, epsilon: 0.13\n",
      "episode: 678/1000, score: 2, epsilon: 0.13\n",
      "episode: 679/1000, score: 3, epsilon: 0.13\n",
      "episode: 680/1000, score: 3, epsilon: 0.13\n",
      "episode: 681/1000, score: 2, epsilon: 0.13\n",
      "episode: 682/1000, score: 2, epsilon: 0.13\n",
      "episode: 683/1000, score: 3, epsilon: 0.13\n",
      "episode: 684/1000, score: 3, epsilon: 0.13\n",
      "episode: 685/1000, score: 2, epsilon: 0.13\n",
      "episode: 686/1000, score: 3, epsilon: 0.13\n",
      "episode: 687/1000, score: 3, epsilon: 0.13\n",
      "episode: 688/1000, score: 3, epsilon: 0.13\n",
      "episode: 689/1000, score: 2, epsilon: 0.13\n",
      "episode: 690/1000, score: 2, epsilon: 0.13\n",
      "episode: 691/1000, score: 3, epsilon: 0.13\n",
      "episode: 692/1000, score: 3, epsilon: 0.13\n",
      "episode: 693/1000, score: 3, epsilon: 0.13\n",
      "episode: 694/1000, score: 2, epsilon: 0.13\n",
      "episode: 695/1000, score: 3, epsilon: 0.12\n",
      "episode: 696/1000, score: 2, epsilon: 0.12\n",
      "episode: 697/1000, score: 2, epsilon: 0.12\n",
      "episode: 698/1000, score: 2, epsilon: 0.12\n",
      "episode: 699/1000, score: 3, epsilon: 0.12\n",
      "episode: 700/1000, score: 3, epsilon: 0.12\n",
      "episode: 701/1000, score: 2, epsilon: 0.12\n",
      "episode: 702/1000, score: 0, epsilon: 0.12\n",
      "episode: 703/1000, score: 3, epsilon: 0.12\n",
      "episode: 704/1000, score: 2, epsilon: 0.12\n",
      "episode: 705/1000, score: 2, epsilon: 0.12\n",
      "episode: 706/1000, score: 3, epsilon: 0.12\n",
      "episode: 707/1000, score: 3, epsilon: 0.12\n",
      "episode: 708/1000, score: 2, epsilon: 0.12\n",
      "episode: 709/1000, score: 3, epsilon: 0.12\n",
      "episode: 710/1000, score: 3, epsilon: 0.12\n",
      "episode: 711/1000, score: 2, epsilon: 0.12\n",
      "episode: 712/1000, score: 3, epsilon: 0.12\n",
      "episode: 713/1000, score: 3, epsilon: 0.12\n",
      "episode: 714/1000, score: 2, epsilon: 0.12\n",
      "episode: 715/1000, score: 3, epsilon: 0.12\n",
      "episode: 716/1000, score: 2, epsilon: 0.12\n",
      "episode: 717/1000, score: 2, epsilon: 0.12\n",
      "episode: 718/1000, score: 1, epsilon: 0.12\n",
      "episode: 719/1000, score: 2, epsilon: 0.12\n",
      "episode: 720/1000, score: 2, epsilon: 0.12\n",
      "episode: 721/1000, score: 2, epsilon: 0.12\n",
      "episode: 722/1000, score: 2, epsilon: 0.11\n",
      "episode: 723/1000, score: 3, epsilon: 0.11\n",
      "episode: 724/1000, score: 2, epsilon: 0.11\n",
      "episode: 725/1000, score: 2, epsilon: 0.11\n",
      "episode: 726/1000, score: 2, epsilon: 0.11\n",
      "episode: 727/1000, score: 3, epsilon: 0.11\n",
      "episode: 728/1000, score: 3, epsilon: 0.11\n",
      "episode: 729/1000, score: 3, epsilon: 0.11\n",
      "episode: 730/1000, score: 3, epsilon: 0.11\n",
      "episode: 731/1000, score: 2, epsilon: 0.11\n",
      "episode: 732/1000, score: 2, epsilon: 0.11\n",
      "episode: 733/1000, score: 0, epsilon: 0.11\n",
      "episode: 734/1000, score: 2, epsilon: 0.11\n",
      "episode: 735/1000, score: 3, epsilon: 0.11\n",
      "episode: 736/1000, score: 1, epsilon: 0.11\n",
      "episode: 737/1000, score: 3, epsilon: 0.11\n",
      "episode: 738/1000, score: 0, epsilon: 0.11\n",
      "episode: 739/1000, score: 3, epsilon: 0.11\n",
      "episode: 740/1000, score: 3, epsilon: 0.11\n",
      "episode: 741/1000, score: 3, epsilon: 0.11\n",
      "episode: 742/1000, score: 3, epsilon: 0.11\n",
      "episode: 743/1000, score: 2, epsilon: 0.11\n",
      "episode: 744/1000, score: 3, epsilon: 0.11\n",
      "episode: 745/1000, score: 3, epsilon: 0.11\n",
      "episode: 746/1000, score: 3, epsilon: 0.11\n",
      "episode: 747/1000, score: 3, epsilon: 0.11\n",
      "episode: 748/1000, score: 3, epsilon: 0.11\n",
      "episode: 749/1000, score: 3, epsilon: 0.11\n",
      "episode: 750/1000, score: 3, epsilon: 0.11\n",
      "episode: 751/1000, score: 0, epsilon: 0.11\n",
      "episode: 752/1000, score: 3, epsilon: 0.11\n",
      "episode: 753/1000, score: 2, epsilon: 0.1\n",
      "episode: 754/1000, score: 3, epsilon: 0.1\n",
      "episode: 755/1000, score: 3, epsilon: 0.1\n",
      "episode: 756/1000, score: 3, epsilon: 0.1\n",
      "episode: 757/1000, score: 3, epsilon: 0.1\n",
      "episode: 758/1000, score: 3, epsilon: 0.1\n",
      "episode: 759/1000, score: 2, epsilon: 0.1\n",
      "episode: 760/1000, score: 3, epsilon: 0.1\n",
      "episode: 761/1000, score: 2, epsilon: 0.1\n",
      "episode: 762/1000, score: 2, epsilon: 0.1\n",
      "episode: 763/1000, score: 0, epsilon: 0.1\n",
      "episode: 764/1000, score: 2, epsilon: 0.1\n",
      "episode: 765/1000, score: 3, epsilon: 0.1\n",
      "episode: 766/1000, score: 2, epsilon: 0.1\n",
      "episode: 767/1000, score: 3, epsilon: 0.1\n",
      "episode: 768/1000, score: 2, epsilon: 0.1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "episode: 769/1000, score: 2, epsilon: 0.1\n",
      "episode: 770/1000, score: 3, epsilon: 0.1\n",
      "episode: 771/1000, score: 2, epsilon: 0.099\n",
      "episode: 772/1000, score: 2, epsilon: 0.099\n",
      "episode: 773/1000, score: 3, epsilon: 0.099\n",
      "episode: 774/1000, score: 2, epsilon: 0.098\n",
      "episode: 775/1000, score: 2, epsilon: 0.098\n",
      "episode: 776/1000, score: 3, epsilon: 0.098\n",
      "episode: 777/1000, score: 2, epsilon: 0.098\n",
      "episode: 778/1000, score: -4, epsilon: 0.097\n",
      "episode: 779/1000, score: 2, epsilon: 0.097\n",
      "episode: 780/1000, score: 3, epsilon: 0.097\n",
      "episode: 781/1000, score: 3, epsilon: 0.096\n",
      "episode: 782/1000, score: 2, epsilon: 0.096\n",
      "episode: 783/1000, score: 2, epsilon: 0.096\n",
      "episode: 784/1000, score: 3, epsilon: 0.095\n",
      "episode: 785/1000, score: 2, epsilon: 0.095\n",
      "episode: 786/1000, score: 2, epsilon: 0.095\n",
      "episode: 787/1000, score: 2, epsilon: 0.095\n",
      "episode: 788/1000, score: 3, epsilon: 0.094\n",
      "episode: 789/1000, score: 2, epsilon: 0.094\n",
      "episode: 790/1000, score: 3, epsilon: 0.094\n",
      "episode: 791/1000, score: 2, epsilon: 0.094\n",
      "episode: 792/1000, score: 3, epsilon: 0.093\n",
      "episode: 793/1000, score: 3, epsilon: 0.093\n",
      "episode: 794/1000, score: 1, epsilon: 0.093\n",
      "episode: 795/1000, score: 2, epsilon: 0.092\n",
      "episode: 796/1000, score: 2, epsilon: 0.092\n",
      "episode: 797/1000, score: 3, epsilon: 0.092\n",
      "episode: 798/1000, score: 1, epsilon: 0.092\n",
      "episode: 799/1000, score: 3, epsilon: 0.091\n",
      "episode: 800/1000, score: 2, epsilon: 0.091\n",
      "episode: 801/1000, score: 2, epsilon: 0.091\n",
      "episode: 802/1000, score: 3, epsilon: 0.09\n",
      "episode: 803/1000, score: 2, epsilon: 0.09\n",
      "episode: 804/1000, score: 1, epsilon: 0.09\n",
      "episode: 805/1000, score: 3, epsilon: 0.09\n",
      "episode: 806/1000, score: 2, epsilon: 0.089\n",
      "episode: 807/1000, score: 3, epsilon: 0.089\n",
      "episode: 808/1000, score: 3, epsilon: 0.089\n",
      "episode: 809/1000, score: 2, epsilon: 0.089\n",
      "episode: 810/1000, score: 2, epsilon: 0.088\n",
      "episode: 811/1000, score: 3, epsilon: 0.088\n",
      "episode: 812/1000, score: 2, epsilon: 0.088\n",
      "episode: 813/1000, score: 3, epsilon: 0.088\n",
      "episode: 814/1000, score: 2, epsilon: 0.087\n",
      "episode: 815/1000, score: 2, epsilon: 0.087\n",
      "episode: 816/1000, score: 3, epsilon: 0.087\n",
      "episode: 817/1000, score: 3, epsilon: 0.087\n",
      "episode: 818/1000, score: 3, epsilon: 0.086\n",
      "episode: 819/1000, score: 2, epsilon: 0.086\n",
      "episode: 820/1000, score: 3, epsilon: 0.086\n",
      "episode: 821/1000, score: 3, epsilon: 0.085\n",
      "episode: 822/1000, score: 3, epsilon: 0.085\n",
      "episode: 823/1000, score: 2, epsilon: 0.085\n",
      "episode: 824/1000, score: 3, epsilon: 0.085\n",
      "episode: 825/1000, score: 2, epsilon: 0.084\n",
      "episode: 826/1000, score: 3, epsilon: 0.084\n",
      "episode: 827/1000, score: 3, epsilon: 0.084\n",
      "episode: 828/1000, score: 3, epsilon: 0.084\n",
      "episode: 829/1000, score: 2, epsilon: 0.083\n",
      "episode: 830/1000, score: 2, epsilon: 0.083\n",
      "episode: 831/1000, score: 2, epsilon: 0.083\n",
      "episode: 832/1000, score: 3, epsilon: 0.083\n",
      "episode: 833/1000, score: 2, epsilon: 0.082\n",
      "episode: 834/1000, score: 3, epsilon: 0.082\n",
      "episode: 835/1000, score: 2, epsilon: 0.082\n",
      "episode: 836/1000, score: 3, epsilon: 0.082\n",
      "episode: 837/1000, score: 3, epsilon: 0.081\n",
      "episode: 838/1000, score: 3, epsilon: 0.081\n",
      "episode: 839/1000, score: 0, epsilon: 0.081\n",
      "episode: 840/1000, score: 3, epsilon: 0.081\n",
      "episode: 841/1000, score: 2, epsilon: 0.081\n",
      "episode: 842/1000, score: 2, epsilon: 0.08\n",
      "episode: 843/1000, score: 2, epsilon: 0.08\n",
      "episode: 844/1000, score: 2, epsilon: 0.08\n",
      "episode: 845/1000, score: 3, epsilon: 0.08\n",
      "episode: 846/1000, score: 1, epsilon: 0.079\n",
      "episode: 847/1000, score: 2, epsilon: 0.079\n",
      "episode: 848/1000, score: 2, epsilon: 0.079\n",
      "episode: 849/1000, score: 3, epsilon: 0.079\n",
      "episode: 850/1000, score: 3, epsilon: 0.078\n",
      "episode: 851/1000, score: 3, epsilon: 0.078\n",
      "episode: 852/1000, score: 3, epsilon: 0.078\n",
      "episode: 853/1000, score: 3, epsilon: 0.078\n",
      "episode: 854/1000, score: 2, epsilon: 0.077\n",
      "episode: 855/1000, score: 3, epsilon: 0.077\n",
      "episode: 856/1000, score: 3, epsilon: 0.077\n",
      "episode: 857/1000, score: 3, epsilon: 0.077\n",
      "episode: 858/1000, score: 3, epsilon: 0.077\n",
      "episode: 859/1000, score: 3, epsilon: 0.076\n",
      "episode: 860/1000, score: 2, epsilon: 0.076\n",
      "episode: 861/1000, score: 2, epsilon: 0.076\n",
      "episode: 862/1000, score: 3, epsilon: 0.076\n",
      "episode: 863/1000, score: 2, epsilon: 0.075\n",
      "episode: 864/1000, score: 3, epsilon: 0.075\n",
      "episode: 865/1000, score: 3, epsilon: 0.075\n",
      "episode: 866/1000, score: 3, epsilon: 0.075\n",
      "episode: 867/1000, score: 2, epsilon: 0.074\n",
      "episode: 868/1000, score: 2, epsilon: 0.074\n",
      "episode: 869/1000, score: 2, epsilon: 0.074\n",
      "episode: 870/1000, score: 3, epsilon: 0.074\n",
      "episode: 871/1000, score: 3, epsilon: 0.074\n",
      "episode: 872/1000, score: 2, epsilon: 0.073\n",
      "episode: 873/1000, score: 3, epsilon: 0.073\n",
      "episode: 874/1000, score: 3, epsilon: 0.073\n",
      "episode: 875/1000, score: 2, epsilon: 0.073\n",
      "episode: 876/1000, score: 3, epsilon: 0.072\n",
      "episode: 877/1000, score: 3, epsilon: 0.072\n",
      "episode: 878/1000, score: 3, epsilon: 0.072\n",
      "episode: 879/1000, score: 3, epsilon: 0.072\n",
      "episode: 880/1000, score: 2, epsilon: 0.072\n",
      "episode: 881/1000, score: 3, epsilon: 0.071\n",
      "episode: 882/1000, score: 3, epsilon: 0.071\n",
      "episode: 883/1000, score: 3, epsilon: 0.071\n",
      "episode: 884/1000, score: 2, epsilon: 0.071\n",
      "episode: 885/1000, score: 3, epsilon: 0.071\n",
      "episode: 886/1000, score: 3, epsilon: 0.07\n",
      "episode: 887/1000, score: 2, epsilon: 0.07\n",
      "episode: 888/1000, score: 2, epsilon: 0.07\n",
      "episode: 889/1000, score: 2, epsilon: 0.07\n",
      "episode: 890/1000, score: 3, epsilon: 0.07\n",
      "episode: 891/1000, score: 3, epsilon: 0.069\n",
      "episode: 892/1000, score: 0, epsilon: 0.069\n",
      "episode: 893/1000, score: 2, epsilon: 0.069\n",
      "episode: 894/1000, score: 3, epsilon: 0.069\n",
      "episode: 895/1000, score: 3, epsilon: 0.068\n",
      "episode: 896/1000, score: 3, epsilon: 0.068\n",
      "episode: 897/1000, score: 2, epsilon: 0.068\n",
      "episode: 898/1000, score: 2, epsilon: 0.068\n",
      "episode: 899/1000, score: 2, epsilon: 0.068\n",
      "episode: 900/1000, score: 3, epsilon: 0.067\n",
      "episode: 901/1000, score: 3, epsilon: 0.067\n",
      "episode: 902/1000, score: 2, epsilon: 0.067\n",
      "episode: 903/1000, score: 3, epsilon: 0.067\n",
      "episode: 904/1000, score: 3, epsilon: 0.067\n",
      "episode: 905/1000, score: 3, epsilon: 0.066\n",
      "episode: 906/1000, score: 3, epsilon: 0.066\n",
      "episode: 907/1000, score: 2, epsilon: 0.066\n",
      "episode: 908/1000, score: 2, epsilon: 0.066\n",
      "episode: 909/1000, score: 2, epsilon: 0.066\n",
      "episode: 910/1000, score: 2, epsilon: 0.065\n",
      "episode: 911/1000, score: 2, epsilon: 0.065\n",
      "episode: 912/1000, score: 2, epsilon: 0.065\n",
      "episode: 913/1000, score: 2, epsilon: 0.065\n",
      "episode: 914/1000, score: 3, epsilon: 0.065\n",
      "episode: 915/1000, score: 3, epsilon: 0.064\n",
      "episode: 916/1000, score: 2, epsilon: 0.064\n",
      "episode: 917/1000, score: 3, epsilon: 0.064\n",
      "episode: 918/1000, score: 3, epsilon: 0.064\n",
      "episode: 919/1000, score: 2, epsilon: 0.064\n",
      "episode: 920/1000, score: 3, epsilon: 0.064\n",
      "episode: 921/1000, score: 2, epsilon: 0.063\n",
      "episode: 922/1000, score: 3, epsilon: 0.063\n",
      "episode: 923/1000, score: 2, epsilon: 0.063\n",
      "episode: 924/1000, score: 3, epsilon: 0.063\n",
      "episode: 925/1000, score: 2, epsilon: 0.063\n",
      "episode: 926/1000, score: 3, epsilon: 0.062\n",
      "episode: 927/1000, score: 2, epsilon: 0.062\n",
      "episode: 928/1000, score: 2, epsilon: 0.062\n",
      "episode: 929/1000, score: 3, epsilon: 0.062\n",
      "episode: 930/1000, score: 2, epsilon: 0.062\n",
      "episode: 931/1000, score: 3, epsilon: 0.061\n",
      "episode: 932/1000, score: 3, epsilon: 0.061\n",
      "episode: 933/1000, score: 2, epsilon: 0.061\n",
      "episode: 934/1000, score: 2, epsilon: 0.061\n",
      "episode: 935/1000, score: 3, epsilon: 0.061\n",
      "episode: 936/1000, score: 3, epsilon: 0.061\n",
      "episode: 937/1000, score: 2, epsilon: 0.06\n",
      "episode: 938/1000, score: 2, epsilon: 0.06\n",
      "episode: 939/1000, score: 3, epsilon: 0.06\n",
      "episode: 940/1000, score: 3, epsilon: 0.06\n",
      "episode: 941/1000, score: 2, epsilon: 0.06\n",
      "episode: 942/1000, score: 3, epsilon: 0.059\n",
      "episode: 943/1000, score: 0, epsilon: 0.059\n",
      "episode: 944/1000, score: 1, epsilon: 0.059\n",
      "episode: 945/1000, score: 3, epsilon: 0.059\n",
      "episode: 946/1000, score: 3, epsilon: 0.059\n",
      "episode: 947/1000, score: 2, epsilon: 0.059\n",
      "episode: 948/1000, score: 3, epsilon: 0.058\n",
      "episode: 949/1000, score: 2, epsilon: 0.058\n",
      "episode: 950/1000, score: 2, epsilon: 0.058\n",
      "episode: 951/1000, score: 2, epsilon: 0.058\n",
      "episode: 952/1000, score: 2, epsilon: 0.058\n",
      "episode: 953/1000, score: 3, epsilon: 0.058\n",
      "episode: 954/1000, score: 2, epsilon: 0.057\n",
      "episode: 955/1000, score: 2, epsilon: 0.057\n",
      "episode: 956/1000, score: 3, epsilon: 0.057\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "episode: 957/1000, score: 2, epsilon: 0.057\n",
      "episode: 958/1000, score: 1, epsilon: 0.057\n",
      "episode: 959/1000, score: 2, epsilon: 0.057\n",
      "episode: 960/1000, score: 3, epsilon: 0.056\n",
      "episode: 961/1000, score: 3, epsilon: 0.056\n",
      "episode: 962/1000, score: 2, epsilon: 0.056\n",
      "episode: 963/1000, score: 2, epsilon: 0.056\n",
      "episode: 964/1000, score: 3, epsilon: 0.056\n",
      "episode: 965/1000, score: 3, epsilon: 0.056\n",
      "episode: 966/1000, score: 3, epsilon: 0.055\n",
      "episode: 967/1000, score: 3, epsilon: 0.055\n",
      "episode: 968/1000, score: 3, epsilon: 0.055\n",
      "episode: 969/1000, score: 3, epsilon: 0.055\n",
      "episode: 970/1000, score: 3, epsilon: 0.055\n",
      "episode: 971/1000, score: 3, epsilon: 0.055\n",
      "episode: 972/1000, score: 2, epsilon: 0.054\n",
      "episode: 973/1000, score: 3, epsilon: 0.054\n",
      "episode: 974/1000, score: 3, epsilon: 0.054\n",
      "episode: 975/1000, score: 2, epsilon: 0.054\n",
      "episode: 976/1000, score: 2, epsilon: 0.054\n",
      "episode: 977/1000, score: 2, epsilon: 0.054\n",
      "episode: 978/1000, score: 2, epsilon: 0.053\n",
      "episode: 979/1000, score: 2, epsilon: 0.053\n",
      "episode: 980/1000, score: 2, epsilon: 0.053\n",
      "episode: 981/1000, score: 3, epsilon: 0.053\n",
      "episode: 982/1000, score: 3, epsilon: 0.053\n",
      "episode: 983/1000, score: 3, epsilon: 0.053\n",
      "episode: 984/1000, score: 2, epsilon: 0.052\n",
      "episode: 985/1000, score: 0, epsilon: 0.052\n",
      "episode: 986/1000, score: 2, epsilon: 0.052\n",
      "episode: 987/1000, score: 2, epsilon: 0.052\n",
      "episode: 988/1000, score: 3, epsilon: 0.052\n",
      "episode: 989/1000, score: 3, epsilon: 0.052\n",
      "episode: 990/1000, score: 2, epsilon: 0.052\n",
      "episode: 991/1000, score: 2, epsilon: 0.051\n",
      "episode: 992/1000, score: 2, epsilon: 0.051\n",
      "episode: 993/1000, score: 3, epsilon: 0.051\n",
      "episode: 994/1000, score: 3, epsilon: 0.051\n",
      "episode: 995/1000, score: 2, epsilon: 0.051\n",
      "episode: 996/1000, score: 2, epsilon: 0.051\n",
      "episode: 997/1000, score: 3, epsilon: 0.05\n",
      "episode: 998/1000, score: 2, epsilon: 0.05\n",
      "episode: 999/1000, score: 2, epsilon: 0.05\n"
     ]
    }
   ],
   "source": [
    "done = False\n",
    "\n",
    "test_state1 = [1,1,1,1] # We record the agents prediction of the Q-function of this state\n",
    "test_state1 = np.reshape(test_state1,[1,state_size])\n",
    "\n",
    "\n",
    "test_state2 = [1,-1,1,1] # We record the agents prediction of the Q-function of this state\n",
    "test_state2 = np.reshape(test_state2,[1,state_size])\n",
    "\n",
    "for e in range(n_episodes):\n",
    "    \n",
    "    state = env.reset()\n",
    "    state = np.reshape(state, [1,state_size])\n",
    "    \n",
    "    for t in range(env.max_steps):\n",
    "        \n",
    "        action = agent.act(state)\n",
    "        next_state, reward, done, _ = env.step(action)\n",
    "        next_state = np.reshape(next_state, [1,state_size])\n",
    "        \n",
    "        agent.remember(state, action, reward, next_state, done)\n",
    "        \n",
    "        state = next_state\n",
    "        \n",
    "        if done:\n",
    "            print('episode: {}/{}, score: {}, epsilon: {:.2}'.format(e,n_episodes, env.cum_reward, agent.epsilon))\n",
    "            score = np.append(score,env.cum_reward)\n",
    "            Q1 = np.append(Q1,agent.model.predict(test_state1)[0])\n",
    "            Q2 = np.append(Q2,agent.model.predict(test_state2)[0])\n",
    "\n",
    "            break\n",
    "\n",
    "        if len(agent.memory) > batch_size:\n",
    "            agent.replay(batch_size)\n",
    "\n",
    "            target_weights = np.array(agent.target_model.get_weights())\n",
    "            current_weights = np.array(agent.model.get_weights())\n",
    "\n",
    "            agent.target_model.set_weights(current_weights*tau + target_weights*(1-tau))\n",
    "        \n",
    "    if agent.epsilon > agent.epsilon_min:\n",
    "        agent.epsilon *= agent.epsilon_decay\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Plot results for trial function\n",
    "\n",
    "Q_plot = np.reshape(Q1,[-1,n_spins])\n",
    "e = [n for n in range(Q_plot.shape[0])]\n",
    "\n",
    "for n in range(state_size):\n",
    "    plt.plot(e,Q_plot[:,n])\n",
    "\n",
    "plt.legend([r\"$\\sigma_1$\",r\"$\\sigma_2$\",r\"$\\sigma_3$\",r\"$\\sigma_4$\"],fontsize = 10)\n",
    "plt.xlabel(\"episode\",fontsize = 15)\n",
    "plt.ylabel(r\"$Q([\\uparrow,\\uparrow,\\uparrow,\\uparrow],\\sigma_i)$\",fontsize = 15)\n",
    "#for n in range(1,7):\n",
    "#    plt.plot([n*1000,n*1000],[-3,3],color = 'black', linestyle = '--')\n",
    "plt.ylim([-1, 2.5])\n",
    "plt.savefig(\"figs/Q_new_new_retraining.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](figs/Q_new.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The correct action to perform on the trial state (with $J = +1$), is to flip the third spin, so that all of them are anti-aligned.\n",
    "\n",
    "When we plot the agents estimation of the Q-function for the trial state, [$\\uparrow,\\downarrow,\\downarrow$],\n",
    " we see that at the end of training, it estimates that the best action is to flip the $\\sigma_3$ spin, which is correct.\n",
    " \n",
    "Moreover, the Q-value of performing this action in this state is also correctly predicted. That is; the expected cumulative reward for this state-action pair is 2 (remember that the reward recieved upon energy minimization is $(N-1)|J| = 2$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, notice that its prediction of the expected cumulative reward for the two other actions are not correct. If the second spin is flipped, the agent can then just flip the first, which minimizes the energy (with all spins anti-aligned), resulting in a total reward of 1. A similar policy exists if the first spin is flipped."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that the agent only estimates correctly the Q-function of the optimal policy, not any of the suboptimal ones. But this should not be a surprise, since the neural network is fitted by using the Bellman equation as the target, which is valid for the optimal policy only, not the full Q-function. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Network plasticity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](figs/Q_retraining_1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we first train the agent to minimize the energy of the spin chain with $J = +1$. In this case the optimal action for the trial state is to flip the third spin, such that the spin configuration is anti-aligned. After 1000 episodes, the agent finds this optimal action, and accurately predicts the optimal Q-value of this action (2)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then reset the exploration policy, empty the replay memory, and change the environment by setting $ J = -1$, such that the energy minimum is found when the spins are all aligned. However, we use the same network parameters (i.e., the weights and biases) that we obtained from training on the $J = +1$ environment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The optimal action is now to flip the first spin, ($\\sigma_1$). In the plot above, the point where we change the coupling $J$ is indicated by the black dashed line. As we can see, the value of flipping the third spin rapidly decreases, while the value of the two other actions rapidly increases. However, even 1000 episodes after the environment was changed, the network still predicts that the flipping the thrid spin ($\\sigma_3$) is the best action, which is obviously wrong."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, this is no surprise, since when we change the environment, the agent have to solve a completely new problem, and the information it has about the previous problem is not useful for him. In fact, this result highlights the importance of having properly initialized networks. Essentially, after episode 1000, the agent starts learning a new problem, but the network parameters is very biased towards the old problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even though the change from $J = +1 $ to $J=-1$ is two highly related problems for us, the agent does not know any physics, so he/she/it sees it as a completely different problem."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First world problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now increase the number of spins to 4, and study the trial state $[\\uparrow,\\uparrow,\\uparrow,\\uparrow]$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By setting $J = +1$, the energy minimum is when the spins are anti-alinged. However, with the trial state defined above, it does not matter which spin is flipped first, since you have to flip two of them in order to reach the energy minimum. If the first spin is flipped, the next optimal action is to flip the thrird spin. If the second spin is flipped, the next optimal action is to flip the fourth spin, etc. Even though all actions are equally good, the agent has to choose one of them. What will it do?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](figs/Q_new_new_retraining.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems like the agent values flipping either spin 2 first. He/she/it cannot really decide which one to prefer. But it is clear that it thinks flipping the third spin first is a very bad action."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If this was a more complicated system, where we did not know the true optimal action (or actions in this case) and asked the agent what it thinks, it would confidently say that flipping spin number 2 is the best thing to do. Obviously this is not wrong, but its not exactly right either. The information that all the actions are equally good is lost in this case, and blindly trusting the agent could make you loose this valuable information about the system you're studying."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case the optimal policy for the trial state, really is ambigious. The reason the agent prefers flipping spin 2, is that by random chance, experiences where the agent has seen this configuration, the ones where spin 2 is flipped has lead to a larger reward than in other cases. That is, the experiences where the proceeding states (i.e., $[\\uparrow,\\downarrow,\\uparrow,\\uparrow]$, and $[\\uparrow,\\uparrow,\\uparrow,\\downarrow]$) have led to a higher reward (by random choices due to the exploration strategy). Or it can simply be that those experiences has been randomly drawn from the memory more often during training."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to help the agent realize that the four actions in the trial state is equally good, we can do the same reset as we did for the three spin scenario: We reset the exploration policy and empty the memory, and then start the training anew. If we do this many times in succession, we obtain the plot shown below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](figs/Q_4spins_1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every 1000 episode, we perform the reset. For the first session of 1000 episodes, the agent favours flipping either spin 1 or spin 4 (in close contention), but after a series of resets, by around episode 5000-6000, the agent values all actions approximately equally. However, the estimation of the Q-value is wrong for all of them, it should actually be "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A unique thing about this trial state ($[\\uparrow,\\uparrow,\\uparrow,\\uparrow]$), is that it should never be an intermediate state between a given initial state and the final anti-algined energy minimum."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is because it is an energy maximum, i.e., the worst state you can be in if you want to reach the energy minimum. Hence, no matter the state the system is in after it is reset, the agent should never choose actions that causes the system to end up in this state."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
